# Руководство по использованию сервиса SceneLoader

## Обзор
Сервис `SceneLoader` управляет переходами между сценами в Unity с использованием промежуточной загрузочной сцены. Использует UniTask для асинхронной загрузки и R3 для реактивного программирования.

## Особенности
- **Асинхронная загрузка сцен**: Загружает сцены с помощью `UniTask` без блокировки.
- **Реактивное отслеживание сцены**: Предоставляет `CurrentSceneNameRx` для наблюдения за текущей сценой.
- **Переход через загрузочную сцену**: Использует промежуточную сцену для плавных переходов.
- **Настраиваемость**: Использует `SceneLoadingConfig` для задания загрузочной, стартовой и включаемых сцен.
- **Интеграция с редактором**: Автоматически обновляет настройки сборки в Unity Editor.

## Настройка
1. **Создание конфигурации**:
   - Создайте актив `SceneLoadingConfig` через `Assets > Create > Config > SceneLoader Config`.
   - Укажите `bootScene` и `startScene` в инспекторе.
   - Добавьте сцены в `scenesToIncludeInBuild` для включения в сборку.

2. **Инициализация сервиса**:
   ```csharp
   var sceneLoader = new SceneLoader(config);
   ```

## Использование
- **Загрузка сцены**:
  ```csharp
  await sceneLoader.LoadSceneAsync("ИмяЦелевойСцены");
  ```
  - Сначала загружает промежуточную сцену, затем целевую.
  - Поддерживает отмену через `CancellationToken`.

- **Отслеживание текущей сцены**:
  ```csharp
  sceneLoader.CurrentSceneNameRx.Subscribe(sceneName => Debug.Log($"Текущая сцена: {sceneName}"));
  ```

## Утилизация
- Утилизируйте сервис, когда он больше не нужен:
  ```csharp
  sceneLoader.Dispose();
  ```

## Примечания
- Требуются пакеты `Cysharp.Threading.Tasks` и `R3`.
- `SceneLoadingConfig` автоматически обновляет настройки сборки в Unity Editor.
- Убедитесь, что `bootScene` и `startScene` назначены, чтобы избежать предупреждений.
- Логирование выполняется через `Common.Utils.Logging.Logger`.